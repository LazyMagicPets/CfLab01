AWSTemplateFormatVersion: '2010-09-09'
# Generated by AwsServiceStackTemplate from AWSTemplates/Snippets/sam.service.yaml
Transform: 
  - 'AWS::Serverless-2016-10-31'
  - 'AWS::LanguageExtensions'
Description: | 
  This stack defines the service resources

Parameters:
  ArtifactsBucketParameter:
    Description: "Bucket where artifacts are stored"
    Type: String

  EnvironmentParameter:   
    Type: String
    Description: The stage name for the API Gateway and controls some policies
  
  SystemSuffixParameter:
    Description: "System Guid. No spaces. Lower case."
    Type: String

  SystemKeyParameter:
    Description: "System Name. No spaces. Lower case."
    Type: String    

#LzParameters start
  TenantAuthUserPoolIdParameter:
    Type: String
  TenantAuthUserPoolClientIdParameter:
    Type: String
  TenantAuthIdentityPoolIdParameter:
    Type: String
  TenantAuthSecurityLevelParameter:
    Type: String
  TenantAuthUserPoolArnParameter:
    Type: String
#LzParameters end


Resources:

#LzLambdas start
  AdminLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      InlineCode: |
        exports.handler = async (event) => {
          return {
            statusCode: 200,
            body: JSON.stringify('hello'),
          };
        };
      Description: Inline Node.js Lambda for /ping endpoint
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Role: !GetAtt AdminLambdaExecutionRole.Arn

  AdminLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-AdminLambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  AdminLambdaApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref AdminLambda
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AdminApi}/*'

#LzLambdas end


#LzQueues start
#LzQeuues end


#LzApis start
  AdminApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HttpApi with Cognito Authentication generated by LazyMagic
      StageName:
        Ref: EnvironmentParameter
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${TenantAuthUserPoolIdParameter}
              audience:
              - Ref: TenantAuthUserPoolClientIdParameter
        DefaultAuthorizer: OpenIdAuthorizer

      CorsConfiguration:
        AllowOrigins:
        - https://*
        - http://*
        AllowHeaders:
        - Authorization
        - lz-cognito-region
        - lz-cognito-userpool-id
        - '*'
        AllowMethods:
        - GET
        - HEAD
        - PUT
        - OPTIONS
        - POST
        - DELETE
        ExposeHeaders:
        - Date
        - x-api-id
        - lz-cognito-region
        - lz-cognito-userpool-id
        MaxAge: 600
        AllowCredentials: false

      DefinitionBody:
        openapi: 3.0.1
        paths:
          '/ping':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdminLambda.Arn}/invocations
                payloadFormatVersion: 2.0


#LzApis end

Outputs:

  AdminLambdaExecutionRoleName:
    Value: !Ref AdminLambdaExecutionRole

  AdminApiId:
    Value: !Ref AdminApi


    